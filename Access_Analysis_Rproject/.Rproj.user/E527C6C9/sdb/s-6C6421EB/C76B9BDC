{
    "contents" : "library(timeDate)\nlibrary(dplyr)\noptions(digits = 8)\n\n#delete pre-existing .csv data file\nfiles <- list.files(\"./data/\")\nif(\"UW_Trip_Data_QC.csv\" %in% files){file.remove(\"./data/UW_Trip_Data_QC.csv\")}\nif (!(\"AD\" %in% ls())){AD = read.csv(\"UW_Trip_Data.csv\")}\n\nAD_56 = AD[which(AD$ProviderId==5 | AD$ProviderId==6),]\nAD_56$Run <-as.character(AD_56$Run)\nAD_56 <- AD_56[which(!is.na(AD_56$Run)),]\nAD_56$ServiceDate <- as.timeDate(as.character(AD_56$ServiceDate))\n\nctr = 1; activ = AD_56$Activity[ctr]\nwhile(activ != 4){\n  ctr = ctr+1\n  activ = AD_56$Activity[ctr]\n}\nAD_56 = AD_56[-(1:(ctr-1)),]\n\n#Counting number of passengers on bus\npasson <- as.character(AD_56$PassOn); passoff <- as.character(AD_56$PassOff)\nnOn <- rep(0, length=length(passon)); nOff = nOn\nnOn[passon!=\"\"] <- 1; nOff[passoff!=\"\"] <- 1\nAD_56$nOn <- nOn; AD_56$nOff <- nOff\n\n#Compute ECDF of distance per leg\ndates = unique(AD_56$ServiceDate)\nrides = unique(AD_56$Run)\nETA_hist_vec = numeric(1)\nDists_hist_vec = ETA_hist_vec\n\n#Haversine formula: \"As the crow flies\" distance\ndeg2rad <- function(deg){return(deg*pi/180)}\ngcd.hf <- function(lat, lon){\n  long1 <- deg2rad(lon[1]); long2 <- deg2rad(lon[2])\n  lat1 <- deg2rad(lat[1]); lat2 <- deg2rad(lat[2])\n  R <- 6371 # Earth mean radius [km]\n  delta.long <- (long2 - long1)\n  delta.lat <- (lat2 - lat1)\n  a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2\n  c <- 2 * asin(min(1,sqrt(a)))\n  d = R * c\n  return(d) # Distance in km\n}\n\n#Coordinate boundaries of King County, WA:\nupper_right <- c(49.020430, -116.998768)\nlower_left <- c(45.606961, -124.974842)\nminlat = lower_left[1]; maxlat = upper_right[1]\nminlon = lower_left[2]; maxlon = upper_right[2]\n\n#Flag routes accordingly\nfor (ride in rides){ #iterate over every instance of a route\n  temp_ride = AD_56[which(AD_56$Run == ride),]\n  temp_ride_days = unique(temp_ride$ServiceDate)\n  for(k in 1:length(temp_ride_days)){ #iterate over one route, different days\n    flag = \"OK\"\n    this_ride = temp_ride[which(temp_ride$ServiceDate==temp_ride_days[k]),]\n    lat_coords = this_ride$LAT; lon_coords = this_ride$LON\n    if(any(lat_coords<minlat) | any(lat_coords>maxlat) | any(lon_coords<minlon) | any(lon_coords>maxlon)){\n      flag = \"BAD_COORDS\"\n    }\n    for(kk in 1:nrow(this_ride)){\n      if((!is.na(this_ride$BookingId[kk])) & (is.na(this_ride$ClientId[kk]))){\n        if(flag != \"OK\"){\n          flag = paste(flag, \"MISSING_CLIENTID\", sep = \", \")\n        }\n        else{\n          flag = \"MISSING_CLIENTID\"\n        }\n      }\n    }\n    if(all(this_ride$LON==this_ride$LON[1])){\n      flag = \"NO_MOVEMENT\"\n    }\n    \n    Durs = numeric(nrow(this_ride)-1)\n    Dists = numeric(nrow(this_ride)-1)\n    for (leg in 2:nrow(this_ride)){\n      lat = c(this_ride$LAT[leg-1], this_ride$LAT[leg]); lon = c(this_ride$LON[leg-1], this_ride$LON[leg])\n      Durs[leg-1] = this_ride$ETA[leg]-this_ride$ETA[leg-1]\n      Dists[leg-1] = gcd.hf(lat, lon)\n    }\n    \n    if(this_ride$Activity[1]!=4 | this_ride$Activity[nrow(this_ride)]!=3){\n      if(flag != \"OK\"){\n        flag = paste(flag, \"ROUTE_FINISH_ERROR\", sep = \", \")\n      }\n      else{\n        flag = \"ROUTE_FINISH_ERROR\"\n      }\n    }\n    \n    if(flag == \"OK\"){\n      ETA_hist_vec <- c(ETA_hist_vec, Durs)\n      Dists_hist_vec <- c(Dists_hist_vec, Dists)\n      #Add number of riders\n      busCount <- numeric(length = nrow(this_ride))\n      for (jj in 1:nrow(this_ride)){\n          if (this_ride$Activity[jj]==4){\n              busCount[jj] = 0\n          }\n          else{\n              addme = this_ride$nOn[jj]; subme = this_ride$nOff[jj]\n              busCount[jj] = busCount[jj-1] + (addme - subme)\n          }\n      }\n      this_ride$NumPass <- busCount\n      write.table(this_ride, file = \"./data/UW_Trip_Data_QC.csv\", col.names = F, append = T, sep = \",\")\n    }\n  }\n}\n\n",
    "created" : 1435343210923.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3161627289",
    "id" : "C76B9BDC",
    "lastKnownWriteTime" : 1435343482,
    "path" : "~/Desktop/DSSG_ffineis/Access_Data/QC_and_JSON_cleanup.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}