source('~/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/R/Cost_Analysis_UglyRides.R')
View(route)
clients_route
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))
route$City
route$ClientId
clients_route <- na.omit(route$ClientId)
clients_route$
clients_route
clients_route <- unique(na.omit(route$ClientId))
clients_route
good = 0
while(good != 1){
#pick random route with an ugly ride.
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_ug_ind <- sample(which(data$Ugly==1), 1)
rand_ug_run <- c(data$Run[rand_ug_ind], data$ServiceDate[rand_ug_ind])
route <- data[which(data$Run == rand_ug_run[1][[1]] & data$ServiceDate == rand_ug_run[2][[1]]), ]
if(any(c(20, 21, 22, 40, 41, 42, 43, 44, 45)%in%route$Activity)){
good = 0
}
else{good = 1}
}
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))
clients_route <- unique(na.omit(route$ClientId))
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
for(jj in 1:(nrow(temp)/2)){
if(temp$Ugly[(jj*2) - 1] == 1){
ugVec[row.names(temp)[(jj*2) - 1]:row.names(temp)[(jj*2)]] <- 1
}
}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = as.numeric(unlist(plotRoute$LON))
lats = as.numeric(unlist(plotRoute$LAT))
zm = 11
center_King_Co = c(quantile(lons,.5, type = 4), quantile(lats,.5, type = 4))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap", messaging = FALSE)
p <- ggmap(map, extent = "device")+
geom_point(aes(x = lons, y = lats), data =plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), size = .24, colour = "green")
for (j in 2:(nrow(plotRoute)-1)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data =plotRoute, size = .24, colour = "red")
}
}
print(p)
clients_route
# Open the cost analysis file and analyze CPB info. Be sure to reformat Cost_analysis.csv prior to loading (issue with row indices column)
cost_data <- read.csv("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/Cost_analysis.csv", header = T)
cost_data$ServiceDate <- as.timeDate(as.character(cost_data$ServiceDate))
cost_data <- cost_data[which(cost_data$ClientCost != Inf & !is.na(cost_data$ClientCost)),]
CPB_sub <- cost_data$ClientCost
hist(CPB_sub, breaks = seq(0, 500, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution"); abline(v = quantile(CPB_sub, 0.9), col = "red",)
uglyrides <- cost_data[which(CPB_sub>quantile(CPB_sub,0.9)),]
normalrides <- cost_data[which(CPB_sub<=quantile(CPB_sub,0.9)),]
##########
# Match the ugly rides with data in overall 4 month file
dataSet <- read.csv("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/UW_Trip_Data_QC.csv")
dataSet$ServiceDate <- as.timeDate(as.character(dataSet$ServiceDate))
dataSet$Run <- as.character(dataSet$Run)
cost_data$Ugly <- numeric(length = nrow(cost_data))
cost_data$Ugly[which(CPB_sub>quantile(CPB_sub,0.9))] <- 1
#search dataSub to match up ugly rides with comprehensive routing data:
dataSub <- dataSet
dataSub$Run <- as.character(dataSub$Run)
CostPassUg = matrix(NA, nrow = nrow(dataSub), ncol = 3)
#This loop takes 4ever...
for (kk in 1:nrow(cost_data)){
ugly <- cost_data[kk,]
ugCli <- which(dataSub$ServiceDate == ugly$ServiceDate & dataSub$Run == ugly$Run
& dataSub$ClientId== ugly$ClientId & dataSub$LAT == ugly$LatStart & dataSub$LON == ugly$LonStart)
CostPassUg[ugCli,] <- c(ugly$ClientCost, ugly$AvgPass, ugly$Ugly)
}
###########
# Open the cost analysis file and analyze CPB info. Be sure to reformat Cost_analysis.csv prior to loading (issue with row indices column)
cost_data <- read.csv("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/Cost_analysis.csv", header = T)
cost_data$ServiceDate <- as.timeDate(as.character(cost_data$ServiceDate))
cost_data <- cost_data[which(cost_data$ClientCost != Inf & !is.na(cost_data$ClientCost)),]
CPB_sub <- cost_data$ClientCost
hist(CPB_sub[CPB_sub<300], breaks = seq(0, 500, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution"); abline(v = quantile(CPB_sub, 0.9), col = "red",)
uglyrides <- cost_data[which(CPB_sub>quantile(CPB_sub,0.9)),]
normalrides <- cost_data[which(CPB_sub<=quantile(CPB_sub,0.9)),]
hist(CPB_sub[CPB_sub<300], breaks = seq(0, 300, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution"); abline(v = quantile(CPB_sub, 0.9), col = "red",)
max(CPB_sub[CPB_sub<300])
quantile(CPB_sub[CPB_sub<300], .9)
quantile(CPB_sub[CPB_sub<300], .95)
quantile(CPB_sub[CPB_sub<300], .999)
CPB_sub[CPB_sub>100]
hist(CPB_sub[CPB_sub], breaks = seq(0, 300, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution"); abline(v = quantile(CPB_sub, 0.9), col = "red",)
hist(CPB_sub, breaks = seq(0, 500, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution"); abline(v = quantile(CPB_sub, 0.9), col = "red",)
hist(CPB_sub, breaks = seq(0, 500, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution",
xaxt = 'n'); abline(v = quantile(CPB_sub, 0.9), col = "red",)
axis(1, at = seq(0,500, 50))
hist(CPB_sub, breaks = seq(0, 500, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution",
xaxt = 'n', col = "aquablue"); abline(v = quantile(CPB_sub, 0.9), col = "red",)
axis(1, at = seq(0,500, 50))
hist(CPB_sub, breaks = seq(0, 500, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution",
xaxt = 'n', col = "aqua"); abline(v = quantile(CPB_sub, 0.9), col = "red",)
axis(1, at = seq(0,500, 50))
CPB_sub <- cost_data$ClientCost
hist(CPB_sub, breaks = seq(0, 500, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution",
xaxt = 'n', col = "blue"); abline(v = quantile(CPB_sub, 0.9), col = "red",)
axis(1, at = seq(0,500, 50))
hist(CPB_sub, breaks = seq(0, 500, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution",
xaxt = 'n', col = "cyan"); abline(v = quantile(CPB_sub, 0.9), col = "red",)
axis(1, at = seq(0,500, 50))
getwd()
any(is.na(cost_data$Run))
rand_ug_ind <- sample(1:nrow(cost_data),1)
dates
#Combine ride cost information with general routing data
setwd("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/")
dataToMerge <- read.csv("matchedMatrix.csv")
data <- cbind(format(read.csv("UW_Trip_Data_QC.csv"), digits = 9), dataToMerge[,2:4])
library(timeDate)
library(ggmap)
data$ServiceDate <- as.timeDate(as.character(data$ServiceDate))
data$Run <- as.character(data$Run)
dates = unique(data$ServiceDate)
dates
data$Run
rides = unique(data$Run)
rides
any(is.na(rides))
any(is.na(dates))
#number of simulations:
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
for(j in 1:N){
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_date <- sample(dates,1)
rand_ride <- sample(rides,1)
rand_run <- c(data$Run[rand_ride], data$ServiceDate[rand_ride])
route <- data[which(data$Run == rand_run[1][[1]] & data$ServiceDate == rand_run[2][[1]]), ]
if any(route$Ugly == 1){storUg[j] <- 1}
else{storUg[j] <- 0}
}
#number of simulations:
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
for(j in 1:N){
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_date <- sample(dates,1)
rand_ride <- sample(rides,1)
rand_run <- c(data$Run[rand_ride], data$ServiceDate[rand_ride])
route <- data[which(data$Run == rand_run[1][[1]] & data$ServiceDate == rand_run[2][[1]]), ]
if any(route$Ugly == 1){storUg[j] <- 1}
else {storUg[j] <- 0}
}
#number of simulations:
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
for(j in 1:N){
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_date <- sample(dates,1)
rand_ride <- sample(rides,1)
rand_run <- c(data$Run[rand_ride], data$ServiceDate[rand_ride])
route <- data[which(data$Run == rand_run[1][[1]] & data$ServiceDate == rand_run[2][[1]]), ]
if any(route$Ugly == 1){storUg[j] <- 1}
else{
storUg[j] <- 0}
}
#number of simulations:
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
for(j in 1:N){
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_date <- sample(dates,1)
rand_ride <- sample(rides,1)
rand_run <- c(data$Run[rand_ride], data$ServiceDate[rand_ride])
route <- data[which(data$Run == rand_run[1][[1]] & data$ServiceDate == rand_run[2][[1]]), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
}
j
#number of simulations:
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
for(j in 1:N){
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_date <- sample(dates,1)
rand_ride <- sample(rides,1)
rand_run <- c(data$Run[rand_ride], data$ServiceDate[rand_ride])
route <- data[which(data$Run == rand_run[1][[1]] & data$ServiceDate == rand_run[2][[1]]), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
#number of simulations:
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
dates = unique(data$ServiceDate)
rides = unique(data$Run)
for(j in 1:N){
rand_date <- sample(dates,1)
rand_ride <- sample(rides,1)
rand_run <- c(data$Run[rand_ride], data$ServiceDate[rand_ride])
route <- data[which(data$Run == rand_run[1][[1]] & data$ServiceDate == rand_run[2][[1]]), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
View(data)
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate)
rides = unique(data$Run)
for(j in 1:N){
rand_date <- sample(dates,1)
rand_ride <- sample(rides,1)
rand_run <- c(data_rel$Run[rand_ride], data_rel$ServiceDate[rand_ride])
route <- data_rel[which(data_rel$Run == rand_run[1][[1]] & data_rel$ServiceDate == rand_run[2][[1]]), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
#number of simulations:
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(dates)
for(j in 1:N){
rand_date <- dates[(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(dates)
dn
rn
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
rn
rd
dn
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
for(j in 1:N){
rand_date <- dates[(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
rand_date <- dates[sample(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
for(j in 1:N){
rand_date <- dates[sample(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
route
View(data_rel)
max(data_rel, na.rm = T)
max(data_rel$Ugly, na.rm = T)
View(cost_data)
View(data)
max(data$Ugly, na.rm  = T)
min(data$Ugly, na.rm  = T)
which(data$Ugly > 1)
max(dataToMerge)
max(dataToMerge$Ugly, na.rm = T)
min(dataToMerge$ClientCost)
min(dataToMerge$ClientCost, na.rm = T)
max(dataToMerge$ClientCost, na.rm = T)
quantile(dataToMerge$ClientCost, .9)
quantile(dataToMerge$ClientCost, .9, na.rm= T)
setwd("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/")
dataToMerge <- read.csv("matchedMatrix.csv")
ugly_cost = quantile(dataToMerge$ClientCost, .9, na.rm= T)
dataToMerge$Ugly[which(dataToMerge$Ugly > ugly_cost)] <- 1
max(dataToMerge$Ugly)
max(dataToMerge$Ugly, na.rm)
max(dataToMerge$Ugly, na.rm = T)
dataToMerge$Ugly <- 1
dataToMerge$Ugly <- 0
dataToMerge$Ugly[which(dataToMerge$Ugly > ugly_cost)] <- 1
max(dataToMerge$Ugly, na.rm)
max(dataToMerge$Ugly, na.rm = T)
dataToMerge$Ugly[which(dataToMerge$ClientCost > ugly_cost)] <- 1
max(dataToMerge$Ugly, na.rm = T)
#Combine ride cost information with general routing data
setwd("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/")
dataToMerge <- read.csv("matchedMatrix.csv")
ugly_cost = quantile(dataToMerge$ClientCost, .9, na.rm= T)
dataToMerge$Ugly <- 0
dataToMerge$Ugly[which(dataToMerge$ClientCost > ugly_cost)] <- 1
data <- cbind(format(read.csv("UW_Trip_Data_QC.csv"), digits = 9), dataToMerge[,2:4])
#number of simulations:
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
for(j in 1:N){
rand_date <- dates[sample(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
test <- na.omit(storUg)
summary(test)
hist(test)
quantile(test,.1)
quantile(test,.15)
quantile(test,.2)
quantile(test,.9)
quantile(test,.8)
View(route)
View(data)
ugly_cost = quantile(dataToMerge$ClientCost, .9, na.rm= T)
dataToMerge$Ugly[which(dataToMerge$ClientCost <= ugly_cost)] <- 0
dataToMerge$Ugly[which(dataToMerge$ClientCost > ugly_cost)] <- 1
unique(dataToMerge$Ugly)
setwd("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/")
dataToMerge <- read.csv("matchedMatrix.csv")
ugly_cost = quantile(dataToMerge$ClientCost, .9, na.rm= T)
dataToMerge$Ugly[which(dataToMerge$ClientCost <= ugly_cost)] <- 0
dataToMerge$Ugly[which(dataToMerge$ClientCost > ugly_cost)] <- 1
unique(dataToMerge$Ugly)
data <- cbind(format(read.csv("UW_Trip_Data_QC.csv"), digits = 9), dataToMerge[,2:4])
j = 1
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
rn
dn
rand_date <- dates[sample(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
rand_date
rand_ride
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
library(timeDate)
library(ggmap)
data$ServiceDate <- as.timeDate(as.character(data$ServiceDate))
data$Run <- as.character(data$Run)
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
j
rand_date <- dates[sample(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
View(route)
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
for(j in 1:N){
rand_date <- dates[sample(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
if (any(route$Ugly == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
route
#number of simulations:
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
for(j in 1:N){
rand_date <- dates[sample(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
if (any(na.rm(route$Ugly) == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
for(j in 1:N){
rand_date <- dates[sample(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
if (any(na.omit(route$Ugly) == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
View(route)
N = 10000
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
for(j in 1:N){
rand_date <- dates[sample(1:dn,1)]
rand_ride <- rides[sample(1:rn,1)]
route <- data_rel[which(data_rel$Run == rand_ride & data_rel$ServiceDate == rand_date), ]
if (any(na.omit(route$Ugly) == 1)){storUg[j] <- 1}
else{
storUg[j] <- 0}
print(j)
}
hist(storUg)
plot(ecdf(storUg))
db
dn
rn
