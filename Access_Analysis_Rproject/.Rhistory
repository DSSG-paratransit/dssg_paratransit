for (j in 2:(nrow(plotRoute)-1)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data =plotRoute, size = .24, colour = "red")
}
}
print(p)
View(route)
temp
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
print(nrow(temp), cli)
if(nrow(temp)==2){
if(temp$Ugly[1] == 1){
ugVec[row.names(temp)[1]:row.names(temp)[2]] <- 1
}
}
else{print("RUN AGAIN")}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
print(c(nrow(temp), cli))
if(nrow(temp)==2){
if(temp$Ugly[1] == 1){
ugVec[row.names(temp)[1]:row.names(temp)[2]] <- 1
}
}
else{print("RUN AGAIN")}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
clients_route
clients_route <- na.omit(unique(as.numeric(route$ClientId)))
unique(as.numeric(route$ClientId))
route$ClientId
as.numeric(route$ClientId)
suppressWarnings(as.numeric(route$ClientId, ))
suppressWarnings(as.numeric(route$ClientId))
clients_route <- na.omit(unique(suppressWarnings(as.numeric(route$ClientId))))
clients_route
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
temp
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))))
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))
View(route)
clients_route <- route$ClientId
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
clients_route <- na.omit(route$ClientId)
for(cli in clients_route){print(cli)}
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))
clients_route <- na.omit(route$ClientId)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
good = 0
while(good != 1){
#pick random route with an ugly ride.
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_ug_ind <- sample(which(data$Ugly==1), 1)
rand_ug_run <- c(data$Run[rand_ug_ind], data$ServiceDate[rand_ug_ind])
route <- data[which(data$Run == rand_ug_run[1][[1]] & data$ServiceDate == rand_ug_run[2][[1]]), ]
if(any(c(20, 21, 22, 40, 41, 42, 43, 44, 45)%in%route$Activity)){
good = 0
}
else{good = 1}
}
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))
clients_route <- na.omit(route$ClientId)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
View(route)
data$ServiceDate <- as.timeDate(as.character(data$ServiceDate))
data$Run <- as.character(data$Run)
good = 0
while(good != 1){
#pick random route with an ugly ride.
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_ug_ind <- sample(which(data$Ugly==1), 1)
rand_ug_run <- c(data$Run[rand_ug_ind], data$ServiceDate[rand_ug_ind])
route <- data[which(data$Run == rand_ug_run[1][[1]] & data$ServiceDate == rand_ug_run[2][[1]]), ]
if(any(c(20, 21, 22, 40, 41, 42, 43, 44, 45)%in%route$Activity)){
good = 0
}
else{good = 1}
}
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))
clients_route <- na.omit(route$ClientId)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
print(c(nrow(temp), cli))
for(jj in 1:(nrow(temp)/2)){
if(temp$Ugly[(jj*2) - 1] == 1){
ugVec[row.names(temp)[(jj*2) - 1]:row.names(temp)[(jj*2)]] <- 1
}
}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = as.numeric(unlist(plotRoute$LON))
lats = as.numeric(unlist(plotRoute$LAT))
zm = 11
center_King_Co = c(quantile(lons,.5, type = 4), quantile(lats,.5, type = 4))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap", messaging = FALSE)
p <- ggmap(map, extent = "device")+
geom_point(aes(x = lons, y = lats), data =plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), size = .24, colour = "green")
for (j in 2:(nrow(plotRoute)-1)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data =plotRoute, size = .24, colour = "red")
}
}
print(p)
View(route)
View(plotRoute)
zm = 10
center_King_Co = c(quantile(lons,.5, type = 4), quantile(lats,.5, type = 4))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap", messaging = FALSE)
p <- ggmap(map, extent = "device")+
geom_point(aes(x = lons, y = lats), data =plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), size = .24, colour = "green")
for (j in 2:(nrow(plotRoute)-1)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data =plotRoute, size = .24, colour = "red")
}
}
print(p)
source('~/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/R/Cost_Analysis_UglyRides.R')
View(temp)
View(route)
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = as.numeric(unlist(plotRoute$LON))
lats = as.numeric(unlist(plotRoute$LAT))
zm = 11
center_King_Co = c(quantile(lons,.5, type = 4), quantile(lats,.5, type = 4))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap", messaging = FALSE)
p <- ggmap(map, extent = "device")+
geom_point(aes(x = lons, y = lats), data =plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), size = .24, colour = "green")
for (j in 2:(nrow(plotRoute)-1)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data =plotRoute, size = .24, colour = "red")
}
}
print(p)
good = 0
while(good != 1){
#pick random route with an ugly ride.
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_ug_ind <- sample(which(data$Ugly==1), 1)
rand_ug_run <- c(data$Run[rand_ug_ind], data$ServiceDate[rand_ug_ind])
route <- data[which(data$Run == rand_ug_run[1][[1]] & data$ServiceDate == rand_ug_run[2][[1]]), ]
if(any(c(20, 21, 22, 40, 41, 42, 43, 44, 45)%in%route$Activity)){
good = 0
}
else{good = 1}
}
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))
clients_route <- na.omit(route$ClientId)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
for(jj in 1:(nrow(temp)/2)){
if(temp$Ugly[(jj*2) - 1] == 1){
ugVec[row.names(temp)[(jj*2) - 1]:row.names(temp)[(jj*2)]] <- 1
}
}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = as.numeric(unlist(plotRoute$LON))
lats = as.numeric(unlist(plotRoute$LAT))
zm = 11
center_King_Co = c(quantile(lons,.5, type = 4), quantile(lats,.5, type = 4))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap", messaging = FALSE)
p <- ggmap(map, extent = "device")+
geom_point(aes(x = lons, y = lats), data =plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), size = .24, colour = "green")
for (j in 2:(nrow(plotRoute)-1)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data =plotRoute, size = .24, colour = "red")
}
}
print(p)
good = 0
while(good != 1){
#pick random route with an ugly ride.
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_ug_ind <- sample(which(data$Ugly==1), 1)
rand_ug_run <- c(data$Run[rand_ug_ind], data$ServiceDate[rand_ug_ind])
route <- data[which(data$Run == rand_ug_run[1][[1]] & data$ServiceDate == rand_ug_run[2][[1]]), ]
if(any(c(20, 21, 22, 40, 41, 42, 43, 44, 45)%in%route$Activity)){
good = 0
}
else{good = 1}
}
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))
clients_route <- na.omit(route$ClientId)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
for(jj in 1:(nrow(temp)/2)){
if(temp$Ugly[(jj*2) - 1] == 1){
ugVec[row.names(temp)[(jj*2) - 1]:row.names(temp)[(jj*2)]] <- 1
}
}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = as.numeric(unlist(plotRoute$LON))
lats = as.numeric(unlist(plotRoute$LAT))
zm = 11
center_King_Co = c(quantile(lons,.5, type = 4), quantile(lats,.5, type = 4))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap", messaging = FALSE)
p <- ggmap(map, extent = "device")+
geom_point(aes(x = lons, y = lats), data =plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), size = .24, colour = "green")
for (j in 2:(nrow(plotRoute)-1)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data =plotRoute, size = .24, colour = "red")
}
}
print(p)
View(plotRoute)
View(route)
7000/60
good = 0
while(good != 1){
#pick random route with an ugly ride.
dates = unique(data$ServiceDate)
rides = unique(data$Run)
rand_ug_ind <- sample(which(data$Ugly==1), 1)
rand_ug_run <- c(data$Run[rand_ug_ind], data$ServiceDate[rand_ug_ind])
route <- data[which(data$Run == rand_ug_run[1][[1]] & data$ServiceDate == rand_ug_run[2][[1]]), ]
if(any(c(20, 21, 22, 40, 41, 42, 43, 44, 45)%in%route$Activity)){
good = 0
}
else{good = 1}
}
route$ClientId <- suppressWarnings(as.numeric(route$ClientId))
clients_route <- na.omit(route$ClientId)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
if(nrow(temp)%%2 != 0){stop("Client only mentioned once!")}
#take on-boarding CPB and make it the off-boarding CPB too, i.e. match CPB's for a client, for leg coloring purposes.
for(kk in seq(from = 2, to = nrow(temp), by =2)){
route[which(row.names(route)==row.names(temp[kk,])), c("ClientCost", "AvgPass", "Ugly")] <- temp[kk-1,c("ClientCost", "AvgPass", "Ugly")]
}
}
#make all legs in between an ugly CPB ugly, to indicate on map:
ctr = 1; ugVec <- matrix(0, nrow = nrow(route), ncol = 1)
row.names(route) <- 1:nrow(route)
for(cli in clients_route){
temp <- route[which(route$ClientId == cli),]
for(jj in 1:(nrow(temp)/2)){
if(temp$Ugly[(jj*2) - 1] == 1){
ugVec[row.names(temp)[(jj*2) - 1]:row.names(temp)[(jj*2)]] <- 1
}
}
}
plotRoute <- route
plotRoute$Ugly <- ugVec
lons = as.numeric(unlist(plotRoute$LON))
lats = as.numeric(unlist(plotRoute$LAT))
zm = 11
center_King_Co = c(quantile(lons,.5, type = 4), quantile(lats,.5, type = 4))
map <- get_googlemap(center = center_King_Co, zoom = zm, maptype = "roadmap", messaging = FALSE)
p <- ggmap(map, extent = "device")+
geom_point(aes(x = lons, y = lats), data =plotRoute, size = sqrt(2), colour = "black")+
geom_segment(aes(x = lons[1], y = lats[1], xend = lons[2], yend = lats[2]), size = .24, colour = "green")
for (j in 2:(nrow(plotRoute)-1)){
if (plotRoute$Ugly[j]==0){
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data=plotRoute, size = .24, colour = "green")
}
else{
p <- p + geom_segment(x = lons[j], y = lats[j], xend = lons[j+1], yend = lats[j+1],data =plotRoute, size = .24, colour = "red")
}
}
print(p)
View(route)
### Analysis of Ugly Rides ###
library(timeDate)
library(ggmap)
#Combine ride cost information with general routing data
setwd("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/")
dataToMerge <- read.csv("matchedMatrix.csv")
ugly_cost = quantile(dataToMerge$ClientCost, .9, na.rm= T)
dataToMerge$Ugly[which(dataToMerge$ClientCost <= ugly_cost)] <- 0
dataToMerge$Ugly[which(dataToMerge$ClientCost > ugly_cost)] <- 1
data <- cbind(format(read.csv("UW_Trip_Data_QC.csv"), digits = 9), dataToMerge[,2:4])
data$ServiceDate <- as.timeDate(as.character(data$ServiceDate))
data$Run <- as.character(data$Run)
median(data$ClientCost)
median(data$ClientCost, na.rm = )
median(data$ClientCost, na.rm = T)
max(data$ClientCost, na.rm = T)
min(data$ClientCost)
min(data$ClientCost, na.rm = T)
table(data$ClientCost == 0)
median(data$ClientCost[data$ClientCost >0], na.rm = T)
sd(data$ClientCost[data$ClientCost >0])
sd(data$ClientCost[data$ClientCost >0], na.rm =T)
storUg <- matrix(NA, nrow = N, ncol = 1)
data_rel <- data[,c("ServiceDate", "Run", "Ugly")]
dates = unique(data$ServiceDate); dn = length(dates)
rides = unique(data$Run); rn = length(rides)
dn
rn
ugly_cost
data$Run
j = 1
temp = data$ServiceDate == data[j]
temp = data[data$ServiceDate == dates[j]]
temp = data[data$ServiceDate == dates[j],]
temp_rides = unique(temp$Run)
View(data_rel)
sum(which(data$ClientCost >= 100))
table(which(data$ClientCost >= 100))
length(which(data$ClientCost >= 100))
length(which(data$ClientCost > 100))
ugYN <- numeric(length = 0)
ugYN
length(ugYN)
View(data_rel)
data_rel <- data[,c("ServiceDate", "Run", "Ugly", "City")]
dates = unique(data$ServiceDate); dn = length(dates)
ugYN <- numeric(length = 0)
for(j in 1:dn){
day = data_rel[data_rel$ServiceDate == dates[j],]
day_rides = unique(day$Run)
for(k in 1:length(day_rides)){
this_run = day[day$Run==day_rides[k],]
if (any(this_run$Ugly ==1)){
ugYN <- c(ugYN, 1)
}
else{
ugYN <- c(ugYN, 0)
}
}
}
View(data_rel)
dates
ugYN <- numeric(length = 0)
j = 1
day = data_rel[data_rel$ServiceDate == dates[j],]
View(day)
day_rides = unique(day$Run)
day_rides
k = 3
this_run = day[day$Run==day_rides[k],]
this_run$Ugly
any(this_run$Ugly)
any(this_run$Ugly==1)
any(this_run$Ugly==1, na.rm = T)
data_rel <- data[,c("ServiceDate", "Run", "Ugly", "City")]
dates = unique(data$ServiceDate); dn = length(dates)
ugYN <- numeric(length = 0)
for(j in 1:dn){
day = data_rel[data_rel$ServiceDate == dates[j],]
day_rides = unique(day$Run)
for(k in 1:length(day_rides)){
this_run = day[day$Run==day_rides[k],]
if (any(this_run$Ugly ==1), na.rm = T){
ugYN <- c(ugYN, 1)
}
else{
ugYN <- c(ugYN, 0)
}
}
}
######################## Count how many runs have ugly rides ##############################
data_rel <- data[,c("ServiceDate", "Run", "Ugly", "City")]
dates = unique(data$ServiceDate); dn = length(dates)
ugYN <- numeric(length = 0)
for(j in 1:dn){
day = data_rel[data_rel$ServiceDate == dates[j],]
day_rides = unique(day$Run)
for(k in 1:length(day_rides)){
this_run = day[day$Run==day_rides[k],]
if (any(this_run$Ugly ==1, na.rm = T)){
ugYN <- c(ugYN, 1)
}
else{
ugYN <- c(ugYN, 0)
}
}
}
length(ugYN)
summary(ugYN)
sum(ugYN)/length(ugYN)
ugRidePrevalence = 100*sum(ugYN)/length(ugYN)
ugRidePrevalence
length(ugYN)
dates
max(dates)
ugRidePrevalence
mat = matrix(0, nrow = 1, ncol = 4)
mat <- rbind(mat, matrix(NA, nrow = 1, ncol = 4))
mat
this_run$City
unlist(this_run$City)
list(cities = this_run$City)
list(cities = this_run$City[this_run$City !=""])
###########
# Open the cost analysis file and analyze CPB info. Be sure to reformat Cost_analysis.csv prior to loading (issue with row indices column)
cost_data <- read.csv("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/Cost_analysis.csv", header = T)
cost_data$ServiceDate <- as.timeDate(as.character(cost_data$ServiceDate))
cost_data <- cost_data[which(cost_data$ClientCost != Inf & !is.na(cost_data$ClientCost)),]
CPB_sub <- cost_data$ClientCost
hist(CPB_sub, breaks = seq(0, 500, 5), xlab = "Costs per boarding ($)", main = "CPB Distribution",
xaxt = 'n', col = "cyan", ylab = "Number of boardings"); abline(v = quantile(CPB_sub, 0.9), col = "red")
axis(1, at = seq(0,500, 50))
uglyrides <- cost_data[which(CPB_sub>quantile(CPB_sub,0.9)),]
normalrides <- cost_data[which(CPB_sub<=quantile(CPB_sub,0.9)),]
setwd("/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/")
dataToMerge <- read.csv("matchedMatrix.csv")
ugly_cost = quantile(dataToMerge$ClientCost, .9, na.rm= T)
dataToMerge$Ugly[which(dataToMerge$ClientCost <= ugly_cost)] <- 0
dataToMerge$Ugly[which(dataToMerge$ClientCost > ugly_cost)] <- 1
data <- cbind(format(read.csv("UW_Trip_Data_QC.csv"), digits = 9), dataToMerge[,2:4])
View(data)
ma(CPB_sub)
max(CPB_sub, na.rm)
max(CPB_sub, na.rm= T)
max(data$ClientCost)
max(data$ClientCost, na.rm = T)
write.csv(data, "/Users/fineiskid/Desktop/DSSG_ffineis/main_repo/Access_Analysis_Rproject/data/QC4mo_and_cost.csv")
